// Code generated by z. DO NOT EDIT.

package zstringset

func New() *StringSet {
  return &StringSet{
    items: make(map[string]bool),
  }
}

type StringSet struct {
  items map[string]bool
}

func (s *StringSet) Add(items ...string) {
  for _, item := range items {
    s.items[item] = true
  }
}

func (s StringSet) Contains(items ...string) bool {
  for _, item := range items {
    if _, exists := s.items[item]; !exists {
      return false
    }
  }
  return true
}

func (s *StringSet) Delete(items ...string) {
  for _, item := range items {
      delete(s.items, item)
  }
}

func (s *StringSet) Clear() {
	s.items = make(map[string]bool)
}

func (s *StringSet) Size() int {
	return len(s.items)
}

func (s *StringSet) Items() (res []string) {
	for key := range s.items {
		res = append(res, key)
	}
	return
}

func (s *StringSet) Union(others ...StringSet) {
  for _, b := range others {
    for key := range b.items {
      s.items[key] = true
    }
  }
}

func (s *StringSet) Complement(others ...StringSet) {
  for _, b := range others {
    for key := range b.items {
      delete(s.items, key)
    }
  }
}

func (s *StringSet) Clone() *StringSet {
  res := New()
  res.Add(s.Items()...)
  return res
}