// Code generated by z. DO NOT EDIT.

package zint16

import "errors"

var (
	ErrInterfaceNotInt16 = errors.New("encountered non-int16 interface")
)

// Check if a slice ([]int16) contains a matching member
func Contains(haystack []int16, needle int16) bool {
	for _, val := range haystack {
		if needle == val {
			return true
		}
	}
	return false
}

// Convert []interface{} into []int16 if possible
func As(slice []interface{}) (res []int16, err error) {
	res = make([]int16, len(slice))
	for i := range slice {
		if strVal, ok := slice[i].(int16); !ok {
			return res, ErrInterfaceNotInt16
		} else {
			res[i] = strVal
		}
	}
	return
}

// Convert []int16 into []interface{}
func Interface(slice []int16) (res []interface{}, err error) {
	res = make([]interface{}, len(slice))
	for i := range slice {
		res[i] = slice[i]
	}
	return
}

// func Remove(slice *[]int16, values ...int16) (res []int16) {
// 
// }
// 
// func Replace(slice *[]int16, val int16, replacement int16) (res []int16) {
// 
// }
// 
// func ReplaceAll(slice *[]int16, val int16, replacement int16) (res []int16) {
// 
// }
// 
// func IndexOf(haystack []int16, needle int16) int {
// 
// }

