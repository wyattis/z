// Code generated by z. DO NOT EDIT.

package zstring

import "errors"

var (
	ErrInterfaceNotString = errors.New("encountered non-string interface")
)

// Check if a slice ([]string) contains a matching member
func Contains(haystack []string, needle string) bool {
	for _, val := range haystack {
		if needle == val {
			return true
		}
	}
	return false
}

// Convert []interface{} into []string if possible
func As(slice []interface{}) (res []string, err error) {
	res = make([]string, len(slice))
	for i := range slice {
		if strVal, ok := slice[i].(string); !ok {
			return res, ErrInterfaceNotString
		} else {
			res[i] = strVal
		}
	}
	return
}

// Convert []string into []interface{}
func Interface(slice []string) (res []interface{}, err error) {
	res = make([]interface{}, len(slice))
	for i := range slice {
		res[i] = slice[i]
	}
	return
}

// func Remove(slice *[]string, values ...string) (res []string) {
// 
// }
// 
// func Replace(slice *[]string, val string, replacement string) (res []string) {
// 
// }
// 
// func ReplaceAll(slice *[]string, val string, replacement string) (res []string) {
// 
// }
// 
// func IndexOf(haystack []string, needle string) int {
// 
// }

