// Code generated by z. DO NOT EDIT.

package zint64

import "errors"

var (
	ErrInterfaceNotInt64 = errors.New("encountered non-int64 interface")
)

// Check if a slice ([]int64) contains a matching member
func Contains(haystack []int64, needle int64) bool {
	for _, val := range haystack {
		if needle == val {
			return true
		}
	}
	return false
}

// Convert []interface{} into []int64 if possible
func As(slice []interface{}) (res []int64, err error) {
	res = make([]int64, len(slice))
	for i := range slice {
		if strVal, ok := slice[i].(int64); !ok {
			return res, ErrInterfaceNotInt64
		} else {
			res[i] = strVal
		}
	}
	return
}

// Convert []int64 into []interface{}
func Interface(slice []int64) (res []interface{}, err error) {
	res = make([]interface{}, len(slice))
	for i := range slice {
		res[i] = slice[i]
	}
	return
}

// func Remove(slice *[]int64, values ...int64) (res []int64) {
// 
// }
// 
// func Replace(slice *[]int64, val int64, replacement int64) (res []int64) {
// 
// }
// 
// func ReplaceAll(slice *[]int64, val int64, replacement int64) (res []int64) {
// 
// }
// 
// func IndexOf(haystack []int64, needle int64) int {
// 
// }

