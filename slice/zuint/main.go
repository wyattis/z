// Code generated by z. DO NOT EDIT.

package zuint

import "errors"

var (
	ErrInterfaceNotUint = errors.New("encountered non-uint interface")
)

// Check if a slice ([]uint) contains a matching member
func Contains(haystack []uint, needle uint) bool {
	for _, val := range haystack {
		if needle == val {
			return true
		}
	}
	return false
}

// Convert []interface{} into []uint if possible
func As(slice []interface{}) (res []uint, err error) {
	res = make([]uint, len(slice))
	for i := range slice {
		if strVal, ok := slice[i].(uint); !ok {
			return res, ErrInterfaceNotUint
		} else {
			res[i] = strVal
		}
	}
	return
}

// Convert []uint into []interface{}
func Interface(slice []uint) (res []interface{}, err error) {
	res = make([]interface{}, len(slice))
	for i := range slice {
		res[i] = slice[i]
	}
	return
}

// func Remove(slice *[]uint, values ...uint) (res []uint) {
// 
// }
// 
// func Replace(slice *[]uint, val uint, replacement uint) (res []uint) {
// 
// }
// 
// func ReplaceAll(slice *[]uint, val uint, replacement uint) (res []uint) {
// 
// }
// 
// func IndexOf(haystack []uint, needle uint) int {
// 
// }

