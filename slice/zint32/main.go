// Code generated by z. DO NOT EDIT.

package zint32

import "errors"

var (
	ErrInterfaceNotInt32 = errors.New("encountered non-int32 interface")
)

// Check if a slice ([]int32) contains a matching member
func Contains(haystack []int32, needle int32) bool {
	for _, val := range haystack {
		if needle == val {
			return true
		}
	}
	return false
}

// Convert []interface{} into []int32 if possible
func As(slice []interface{}) (res []int32, err error) {
	res = make([]int32, len(slice))
	for i := range slice {
		if strVal, ok := slice[i].(int32); !ok {
			return res, ErrInterfaceNotInt32
		} else {
			res[i] = strVal
		}
	}
	return
}

// Convert []int32 into []interface{}
func Interface(slice []int32) (res []interface{}, err error) {
	res = make([]interface{}, len(slice))
	for i := range slice {
		res[i] = slice[i]
	}
	return
}

// func Remove(slice *[]int32, values ...int32) (res []int32) {
// 
// }
// 
// func Replace(slice *[]int32, val int32, replacement int32) (res []int32) {
// 
// }
// 
// func ReplaceAll(slice *[]int32, val int32, replacement int32) (res []int32) {
// 
// }
// 
// func IndexOf(haystack []int32, needle int32) int {
// 
// }

