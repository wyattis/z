// Code generated by z. DO NOT EDIT.

package zfloat64

import "errors"

var (
	ErrInterfaceNotFloat64 = errors.New("encountered non-float64 interface")
)

// Check if a slice ([]float64) contains a matching member
func Contains(haystack []float64, needle float64) bool {
	for _, val := range haystack {
		if needle == val {
			return true
		}
	}
	return false
}

// Convert []interface{} into []float64 if possible
func As(slice []interface{}) (res []float64, err error) {
	res = make([]float64, len(slice))
	for i := range slice {
		if strVal, ok := slice[i].(float64); !ok {
			return res, ErrInterfaceNotFloat64
		} else {
			res[i] = strVal
		}
	}
	return
}

// Convert []float64 into []interface{}
func Interface(slice []float64) (res []interface{}, err error) {
	res = make([]interface{}, len(slice))
	for i := range slice {
		res[i] = slice[i]
	}
	return
}

// func Remove(slice *[]float64, values ...float64) (res []float64) {
// 
// }
// 
// func Replace(slice *[]float64, val float64, replacement float64) (res []float64) {
// 
// }
// 
// func ReplaceAll(slice *[]float64, val float64, replacement float64) (res []float64) {
// 
// }
// 
// func IndexOf(haystack []float64, needle float64) int {
// 
// }

